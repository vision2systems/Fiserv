/* 
 * Initiate Payment API
 *
 * Afinis is a diverse group of organizations working to support advancement and use of API standardization in the financial services industry. Utilization of this API requires a developer to [register](https://www.afinis.org/user/register) their application.
 *
 * OpenAPI spec version: 1.0.7
 * Contact: info@afinis.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;

using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Vision.Vault.Treasury.Afnis.Model
{
    /// <summary>
    /// Specifies the high-level purpose of the instruction based on a set of pre-defined categories
    /// </summary>
    [DataContract]
    public partial class CategoryPurpose :  IEquatable<CategoryPurpose>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryPurpose" /> class.
        /// </summary>
        [JsonConstructor]
        protected CategoryPurpose() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryPurpose" /> class.
        /// </summary>
        /// <param name="proprietary">Category purpose, in a proprietary form. (required).</param>
        public CategoryPurpose(string proprietary = default(string))
        {
            // to ensure "proprietary" is required (not null)
            if (proprietary == null)
            {
                throw new InvalidDataException("proprietary is a required property for CategoryPurpose and cannot be null");
            }
            else
            {
                this.Proprietary = proprietary;
            }
        }
        
        /// <summary>
        /// Category purpose, in a proprietary form.
        /// </summary>
        /// <value>Category purpose, in a proprietary form.</value>
        [DataMember(Name="proprietary", EmitDefaultValue=false)]
        public string Proprietary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryPurpose {\n");
            sb.Append("  Proprietary: ").Append(Proprietary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CategoryPurpose);
        }

        /// <summary>
        /// Returns true if CategoryPurpose instances are equal
        /// </summary>
        /// <param name="input">Instance of CategoryPurpose to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CategoryPurpose input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Proprietary == input.Proprietary ||
                    (this.Proprietary != null &&
                    this.Proprietary.Equals(input.Proprietary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Proprietary != null)
                    hashCode = hashCode * 59 + this.Proprietary.GetHashCode();
                return hashCode;
            }
        }

       
    }

}
