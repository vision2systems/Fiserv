/* 
 * Initiate Payment API
 *
 * Afinis is a diverse group of organizations working to support advancement and use of API standardization in the financial services industry. Utilization of this API requires a developer to [register](https://www.afinis.org/user/register) their application.
 *
 * OpenAPI spec version: 1.0.7
 * Contact: info@afinis.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Vision.Vault.Treasury.Afnis.Model
{
    /// <summary>
    /// DirectDebitTransactionInformationInner
    /// </summary>
    [DataContract]
    public class DirectDebitTransactionInformation : IEquatable<DirectDebitTransactionInformation>
    {

        public DirectDebitTransactionInformation()
        {
            PaymentTypeInformation = new PaymentTypeInformation();

        }

        /// <summary>
        /// Gets or Sets PaymentIdentification
        /// </summary>
        [DataMember(Name="paymentIdentification", EmitDefaultValue=false)]
        public string PaymentIdentification { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTypeInformation
        /// </summary>
        [DataMember(Name="paymentTypeInformation", EmitDefaultValue=false)]
        public PaymentTypeInformation PaymentTypeInformation { get; set; }

        /// <summary>
        /// Gets or Sets DiscretionaryData
        /// </summary>
        [DataMember(Name="discretionaryData", EmitDefaultValue=false)]
        public DiscretionaryData DiscretionaryData { get; set; }

        /// <summary>
        /// Gets or Sets RequestedCollectionDate
        /// </summary>
        [DataMember(Name="requestedCollectionDate", EmitDefaultValue=false)]
        public string RequestedCollectionDate { get; set; }

        /// <summary>
        /// Gets or Sets SettlementTimeIndication
        /// </summary>
        [DataMember(Name="settlementTimeIndication", EmitDefaultValue=false)]
        public string SettlementTimeIndication { get; set; }

        /// <summary>
        /// Gets or Sets InstructedAmount
        /// </summary>
        [DataMember(Name="instructedAmount", EmitDefaultValue=false)]
        public InstructedAmount InstructedAmount { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAgent
        /// </summary>
        [DataMember(Name="debtorAgent", EmitDefaultValue=false)]
        public DebtorAgent DebtorAgent { get; set; }

        /// <summary>
        /// Gets or Sets Debtor
        /// </summary>
        [DataMember(Name="debtor", EmitDefaultValue=false)]
        public TransactionDebtor Debtor { get; set; }

        /// <summary>
        /// Gets or Sets DebtorAccount
        /// </summary>
        [DataMember(Name="debtorAccount", EmitDefaultValue=false)]
        public TransactionDebtorAccount DebtorAccount { get; set; }

        /// <summary>
        /// Gets or Sets RemittanceInformation
        /// </summary>
        [DataMember(Name="remittanceInformation", EmitDefaultValue=false)]
        public RemittanceInformation RemittanceInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirectDebitTransactionInformationInner {\n");
            sb.Append("  PaymentIdentification: ").Append(PaymentIdentification).Append("\n");
            sb.Append("  PaymentTypeInformation: ").Append(PaymentTypeInformation).Append("\n");
            sb.Append("  DiscretionaryData: ").Append(DiscretionaryData).Append("\n");
            sb.Append("  RequestedCollectionDate: ").Append(RequestedCollectionDate).Append("\n");
            sb.Append("  SettlementTimeIndication: ").Append(SettlementTimeIndication).Append("\n");
            sb.Append("  InstructedAmount: ").Append(InstructedAmount).Append("\n");
            sb.Append("  DebtorAgent: ").Append(DebtorAgent).Append("\n");
            sb.Append("  Debtor: ").Append(Debtor).Append("\n");
            sb.Append("  DebtorAccount: ").Append(DebtorAccount).Append("\n");
            sb.Append("  RemittanceInformation: ").Append(RemittanceInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DirectDebitTransactionInformation);
        }

        /// <summary>
        /// Returns true if DirectDebitTransactionInformationInner instances are equal
        /// </summary>
        /// <param name="input">Instance of DirectDebitTransactionInformationInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirectDebitTransactionInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentIdentification == input.PaymentIdentification ||
                    (this.PaymentIdentification != null &&
                    this.PaymentIdentification.Equals(input.PaymentIdentification))
                ) && 
                (
                    this.PaymentTypeInformation == input.PaymentTypeInformation ||
                    (this.PaymentTypeInformation != null &&
                    this.PaymentTypeInformation.Equals(input.PaymentTypeInformation))
                ) && 
                (
                    this.DiscretionaryData == input.DiscretionaryData ||
                    (this.DiscretionaryData != null &&
                    this.DiscretionaryData.Equals(input.DiscretionaryData))
                ) && 
                (
                    this.RequestedCollectionDate == input.RequestedCollectionDate ||
                    (this.RequestedCollectionDate != null &&
                    this.RequestedCollectionDate.Equals(input.RequestedCollectionDate))
                ) && 
                (
                    this.SettlementTimeIndication == input.SettlementTimeIndication ||
                    (this.SettlementTimeIndication != null &&
                    this.SettlementTimeIndication.Equals(input.SettlementTimeIndication))
                ) && 
                (
                    this.InstructedAmount == input.InstructedAmount ||
                    (this.InstructedAmount != null &&
                    this.InstructedAmount.Equals(input.InstructedAmount))
                ) && 
                (
                    this.DebtorAgent == input.DebtorAgent ||
                    (this.DebtorAgent != null &&
                    this.DebtorAgent.Equals(input.DebtorAgent))
                ) && 
                (
                    this.Debtor == input.Debtor ||
                    (this.Debtor != null &&
                    this.Debtor.Equals(input.Debtor))
                ) && 
                (
                    this.DebtorAccount == input.DebtorAccount ||
                    (this.DebtorAccount != null &&
                    this.DebtorAccount.Equals(input.DebtorAccount))
                ) && 
                (
                    this.RemittanceInformation == input.RemittanceInformation ||
                    (this.RemittanceInformation != null &&
                    this.RemittanceInformation.Equals(input.RemittanceInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentIdentification != null)
                    hashCode = hashCode * 59 + this.PaymentIdentification.GetHashCode();
                if (this.PaymentTypeInformation != null)
                    hashCode = hashCode * 59 + this.PaymentTypeInformation.GetHashCode();
                if (this.DiscretionaryData != null)
                    hashCode = hashCode * 59 + this.DiscretionaryData.GetHashCode();
                if (this.RequestedCollectionDate != null)
                    hashCode = hashCode * 59 + this.RequestedCollectionDate.GetHashCode();
                if (this.SettlementTimeIndication != null)
                    hashCode = hashCode * 59 + this.SettlementTimeIndication.GetHashCode();
                if (this.InstructedAmount != null)
                    hashCode = hashCode * 59 + this.InstructedAmount.GetHashCode();
                if (this.DebtorAgent != null)
                    hashCode = hashCode * 59 + this.DebtorAgent.GetHashCode();
                if (this.Debtor != null)
                    hashCode = hashCode * 59 + this.Debtor.GetHashCode();
                if (this.DebtorAccount != null)
                    hashCode = hashCode * 59 + this.DebtorAccount.GetHashCode();
                if (this.RemittanceInformation != null)
                    hashCode = hashCode * 59 + this.RemittanceInformation.GetHashCode();
                return hashCode;
            }
        }

      
        
    }

}
